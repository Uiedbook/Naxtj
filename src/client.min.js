// ? naxt object
if (!window.naxt) {
  window.naxt = { fns: {} };
}
// ? naxt methods
window.naxt.update = async function (element, api) {
  const xhres = await fetch(api);
  const html = await xhres.text();
  if (html.includes("<")) {
    element.innerHTML = html;
    const tc = document.createElement("div");
    tc.innerHTML = html;
    const ses = tc.querySelectorAll("script");
    ses.forEach((se) => {
      const jsCode = se.textContent?.trim();
      const ns = document.createElement("script");
      ns.textContent = jsCode || "";
      document.body.appendChild(ns);
      ns.remove();
    });
  }
  window.naxt.hydrate();
};
window.naxt.refresh = (el) => {
  if (el) {
    const link = el.getAttribute("data-naxt-refresh-load");
    return window.naxt.update(el, link);
  }
};
window.naxt.hydrate = async () => {
  // load links
  const lds = Array.from(document.querySelectorAll("[data-naxt-load]"));
  await Promise.all(
    lds.map((el) => {
      const link = el.getAttribute("data-naxt-load");
      el.setAttribute("data-naxt-refresh-load", link);
      el.removeAttribute("data-naxt-load");
      return window.naxt.update(el, link);
    })
  );
  if (lds.length) {
    await window.naxt.hydrate();
  }
  //? handle clicked
  const as = Array.from(document.querySelectorAll("[data-naxt-event]"));
  await Promise.all(
    as.map(async (ae) => {
      const etyp = ae.getAttribute("data-naxt-event-type") || "click";
      ae["on" + etyp] = (e) => {
        e.preventDefault();
        return naxt
          .update(
            document.getElementById(ae.getAttribute("data-naxt-event")),
            ae.getAttribute("data-naxt-link")
          )
          .then(() => {
            window.naxt.hydrate();
          });
      };
    })
  );
};
window.naxt.hydrate();
